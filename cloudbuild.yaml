steps:
  # Step 1: Install dependencies
  - name: 'node:20'
    entrypoint: npm
    args: ['ci']

  # Step 2: Run linting
  - name: 'node:20'
    entrypoint: npm
    args: ['run', 'lint']

  # Step 3: Run type checking
  - name: 'node:20'
    entrypoint: npm
    args: ['run', 'typecheck']

  # Step 4: Run tests
  - name: 'node:20'
    entrypoint: npm
    args: ['test']

  # Step 5: Build the application
  - name: 'node:20'
    entrypoint: npm
    args: ['run', 'build']

  # Step 6: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:latest'
      - '.'

  # Step 7: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}'

  # Step 8: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '${_SERVICE_NAME}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--add-cloudsql-instances'
      - '${_CLOUD_SQL_INSTANCE}'
      - '--set-env-vars'
      - 'NODE_ENV=${_ENVIRONMENT},GCP_PROJECT_ID=$PROJECT_ID,GCP_REGION=${_REGION},CLOUD_RUN_SERVICE_URL=${_SERVICE_URL},WORKFLOW_NAME=expert-sourcing-workflow,SEARCH_MODEL=${_SEARCH_MODEL},GCS_BUCKET_NAME=${_GCS_BUCKET}'
      - '--update-secrets'
      - 'DB_PASSWORD=${_DB_PASSWORD_SECRET}:latest,OPENAI_API_KEY=${_OPENAI_KEY_SECRET}:latest'
      - '--timeout'
      - '10m'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'

  # Step 9: Deploy Cloud Workflow (only if workflow file changed)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if git diff --name-only HEAD^ HEAD | grep -q "workflows/"; then
          echo "Deploying Cloud Workflow..."
          gcloud workflows deploy expert-sourcing-workflow \
            --source=workflows/expert-sourcing-workflow.yaml \
            --location=${_REGION} \
            --service-account=${_WORKFLOW_SERVICE_ACCOUNT}
        else
          echo "No workflow changes detected, skipping deployment"
        fi

# Build configuration
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Substitution variables (set via trigger configuration)
substitutions:
  _REGION: 'us-central1'
  _REPOSITORY: 'expert-contacts'
  _SERVICE_NAME: 'expert-contacts-service'
  _ENVIRONMENT: 'production'
  _CLOUD_SQL_INSTANCE: '${PROJECT_ID}:us-central1:expert-contacts-prod'
  _SERVICE_URL: 'https://expert-contacts-service-${PROJECT_NUMBER}.us-central1.run.app'
  _DB_PASSWORD_SECRET: 'expert-contacts-db-password'
  _OPENAI_KEY_SECRET: 'expert-contacts-openai-key'
  _WORKFLOW_SERVICE_ACCOUNT: '${PROJECT_NUMBER}-compute@developer.gserviceaccount.com'
  _SEARCH_MODEL: 'o3'
  _GCS_BUCKET: 'expert-contacts-raw-outputs-${PROJECT_ID}'

# Trigger configuration (to be set in Cloud Console or via gcloud)
# - Branch: main -> Production
# - Branch: staging -> Staging (override _ENVIRONMENT, _CLOUD_SQL_INSTANCE, etc.)
# - Branch: develop -> Development (override _ENVIRONMENT, _CLOUD_SQL_INSTANCE, etc.)